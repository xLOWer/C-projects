#include <windows.h>
#include <ctime>

#define WIN_HEIGHT 900 //window height
#define WIN_WIDTH 1000 //window width
#define W_START_X 0 //window start position x
#define W_START_Y 0 //window start position y

#include "additionals.h"

//***********************************************************************
LRESULT CALLBACK WndProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam) {
	PAINTSTRUCT pt;
	//srand((unsigned int)time(NULL));
	switch(Message) {
		case WM_DESTROY: {
			PostQuitMessage(0);
			break;
		}
		case WM_PAINT: {
			_hdc = BeginPaint(hwnd, &pt);
			//***********************
			unsigned short int r = 400, x = r + 10, y = r + 10, _sec, _min, _hour , n = 40;
			float fi, fi_sec, fi_min, fi_hour;
			time_t t;
			struct tm *t_m;
			
			Ellipse(_hdc, x - r, y + r, x + r, y - r);
			for(unsigned short int i = 0; i < 360; i+=6){
				fi = (90 + i) * M_PI / 180;
				MYLINE(
						x + sin(fi * 5) * r / 1.15, 
						y + cos(fi * 5) * r / 1.15, 
						x + sin(fi * 5) * r / 1.05, 
						y + cos(fi * 5) * r / 1.05
				);
				MYLINE(
						x + sin(fi) * r / 1.08, 
						y + cos(fi) * r / 1.08, 
						x + sin(fi) * r / 1.03, 
						y + cos(fi) * r / 1.03
				);
			}
				
			while(1){
				t = time(NULL);
				t_m = localtime(&t);
				
				_sec = t_m->tm_sec; 
				_min = t_m->tm_min;
				_hour = t_m->tm_hour;
				
				if(_hour > 12)_hour-=12;
				//std::cout<<"\n"<<_min;
				
				fi_sec = ((_sec * 6) - 180) * M_PI / -180;
				fi_min = (((_min * 6) + (_sec / 10)) - 180) * M_PI / -180;
				fi_hour = (((_hour * 30) + (_min / 2)) - 180) * M_PI / -180;
				
				MYLINE(x, y, (r/1.1)*sin(fi_sec)+x, (r/1.1)*cos(fi_sec)+y);
				MYLINE(x, y, (r/1.4)*sin(fi_min)+x, (r/1.4)*cos(fi_min)+y);
				MYLINE(x, y, (r/2.2)*sin(fi_hour)+x, (r/2.2)*cos(fi_hour)+y);
				
				MYpause(50); 
				Ellipse(_hdc, x - r +n, y + r-n, x + r-n, y - r+n);  //clear screen
			}
			//***********************
			EndPaint(hwnd, &pt);
			break;
		}
		default:
			return DefWindowProc(hwnd, Message, wParam, lParam);
	}
	return 0;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	WNDCLASSEX wc; /* A properties struct of our window */
	HWND hwnd; /* A 'HANDLE', hence the H, or a pointer to our window */
	MSG msg; /* A temporary location for all messages */
	memset(&wc,0,sizeof(wc));
	wc.cbSize		 = sizeof(WNDCLASSEX);
	wc.lpfnWndProc	 = WndProc; /* This is where we will send messages to */
	wc.hInstance	 = hInstance;
	wc.hCursor		 = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
	wc.lpszClassName = "WindowClass";
	wc.hIcon		 = LoadIcon(NULL, IDI_APPLICATION); /* Load a standard icon */
	wc.hIconSm		 = LoadIcon(NULL, IDI_APPLICATION); /* Use the name "A" to use the project icon */
	VirtualAllocEx(hwnd, NULL, 1024 * 1024 * 1024, MEM_COMMIT, PAGE_READWRITE); /* Reserve memory for our programm */
	if(!RegisterClassEx(&wc)) {
		MessageBox(NULL, "Window Registration Failed!","Error!",MB_ICONEXCLAMATION|MB_OK);
		return 0;
	}
	hwnd = CreateWindowEx(WS_EX_CLIENTEDGE,"WindowClass","Caption",WS_VISIBLE|WS_OVERLAPPEDWINDOW,W_START_X,W_START_Y, WIN_WIDTH,WIN_HEIGHT,NULL,NULL,hInstance,NULL);
	if(hwnd == NULL) {
		MessageBox(NULL, "Window Creation Failed!","Error!",MB_ICONEXCLAMATION|MB_OK);
		return 0;
	}
	while(GetMessage(&msg, NULL, 0, 0) > 0) { /* If no error is received... */
		TranslateMessage(&msg); /* Translate key codes to chars if present */
		DispatchMessage(&msg); /* Send it to WndProc */
	}
	return msg.wParam;
}
